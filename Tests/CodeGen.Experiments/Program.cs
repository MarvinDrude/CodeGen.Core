
using CodeGen.Contracts.Enums;
using CodeGen.Writing.Builders;
using CodeGen.Writing.Builders.Common;
using CodeGen.Writing.Builders.Interfaces;
using CodeGen.Writing.Builders.Types;
using CodeGen.Writing.Models.Common;

// Console.WriteLine("Hello, World!");
//
// var writer = new CodeTextWriter(
//    stackalloc char[256], stackalloc char[128]);
//   
// var x = 20;
//
// writer.UpIndent();
// writer.UpIndent();
// writer.OpenBody();
// writer.WriteInterpolated($"{x} - {x}");
// writer.WriteLine();
// writer.CloseBodySemicolon();
//
// Console.WriteLine(writer.ToString());

try
{
   var builder = new CodeBuilder(
      stackalloc char[1024], stackalloc char[128]);

   const int x = 20;
   
   builder.File
      .WriteStartAutoGenerated()
         .WriteLine("// Here")
         .WriteLine("// is a message")
         .WriteLineInterpolated($"// Test {x}")
      .WriteEndAutoGenerated()
      .WriteNullableEnable()
         .WriteUsing("NameSpaceA")
         .WriteUsing("NameSpaceB.Test", true);
   
   builder.TypeHeader
      .WriteAccessInternal()
      .WriteClassModifiers(ClassModifier.Sealed | ClassModifier.Partial)
      .WriteClass("ClassName")
      .WriteStartGenericParameters()
         .WriteGenericParameter("T")
         .WriteGenericParameter("T2", true)
      .WriteEndGenericParameters()
      .WriteStartParameterList()
         .WriteParameter("string name")
         .WriteParameter("int age")
         .WriteParameterInterpolated(false, false, $"int test = {x}")
      .WriteEndParameterList()
      .WriteStartBaseList()
         .WriteBaseType("BaseClass")
         .WriteBaseType("IInterfaceBase", true)
      .WriteEndBaseList()
      .WriteStartGenericConstraints("T")
         .WriteGenericConstraint("notnull")
         .WriteGenericConstraint("IInterfaceName", true)
      .WriteLineEndGenericConstraints()
      .WriteStartGenericConstraints("T2")
         .WriteGenericConstraint("class")
      .WriteLineEndGenericConstraints()
      .OpenBody();

   builder.WriteLine("public static void Test()")
      .OpenBody()
         .WriteLine("Console.WriteLine(\"Test\");")
      .CloseBody();
   
   builder.TypeHeader
      .CloseBody();

   Console.WriteLine(builder.Writer.ToString());
   builder.Dispose();
}
catch (Exception e)
{
   Console.WriteLine(e);
   throw;
}

