
using BenchmarkDotNet.Running;
using DruDe.Core.Buffers;
using DruDe.Core.CodeGen;
using DruDe.Core.CodeGen.Immediate;
using DruDe.Core.Perfs.Buffers;

#if RELEASE
BenchmarkRunner.Run<NoAllocationCodeWriterBenchmark>();
#else

// var test = new NoAllocationCodeWriterBenchmark();
// test.N = 100;
// test.Run();

Console.WriteLine("Start");
Test();

void Test()
{
   try
   {
      var builder = new CodeBuilder(
         stackalloc char[512],
         stackalloc char[128],
         3, ' ');
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public static class Test<T, E>")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
            .FirstGenericConstraint("where T : notnull")
            .NextGenericConstraint("where E : struct, new()")
            .CloseGenericConstraint()
         .CloseHeader()
            .WriteLine("Wwww")
         .CloseBody();

      builder.Writer.WriteLine();
      builder.Writer.WriteLine();
      
      builder.ClassIm
         .OpenHeader("public static class Test<T, E>")
            .FirstGenericConstraint("where T : notnull")
            .NextGenericConstraint("where E : struct, new()")
            .CloseGenericConstraint()
         .CloseHeader()
            .WriteLine("Wwww")
         .CloseBody();
      
      var str = builder.ToString();
      
      builder.Dispose();
   }
   catch (Exception error)
   {
      Console.WriteLine(error);
   }
}

#endif
