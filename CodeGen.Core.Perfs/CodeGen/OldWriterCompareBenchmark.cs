using System.Security.Cryptography;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Engines;
using CodeGen.Common.CodeGen.Immediate;
using CodeGen.Common.CodeGen.Models.Methods;
using CodeGenHelpers;
using Microsoft.CodeAnalysis;
using OldCodeWriter;
using CodeBuilder = CodeGen.Common.CodeGen.CodeBuilder;

namespace CodeGen.Core.Perfs.CodeGen;

[SimpleJob(RunStrategy.Throughput, iterationCount: 6)]
[MinColumn, MaxColumn, MeanColumn, MedianColumn, MemoryDiagnoser]
public class OldWriterCompareBenchmark
{
   [Benchmark]
   public char NewWriterStatefulNoArrayPoolNeededNoStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[1024],
         stackalloc char[6],
         1, '\t');

      builder.NameSpace.Usings = [
         "System.Test",
         "System.A",
         "System.B"
      ];
      builder.NameSpace.EnableNullable = true;
      builder.NameSpace.AutoGenerated = true;
      
      builder.NameSpace.Path = "My.NameSpace";
      builder.NameSpace.Render();

      builder.Class.Declaration = $"public abstract class Test";
      builder.Class.BaseDeclarations = [
         "BaseClassOne",
         "IInterfaceTwo"
      ];
      builder.Class.RenderDeclaration();

      builder.Method.Modifiers = "public";
      builder.Method.ReturnType = "void";
      builder.Method.Name = "TestMethod";

      builder.Method.Parameters = [
         new MethodParameter()
         {
            Name = "name",
            Type = "string"
         }
      ];
      builder.Method.RenderHeader();
      
      builder.Writer.OpenBody();
      builder.Writer.WriteLine("Console.WriteLine(name);");
      builder.Writer.CloseBody();
      
      builder.Writer.WriteLine();

      builder.Method.Modifiers = "public abstract";
      builder.Method.ReturnType = "void";
      builder.Method.Name = "AbstractMethod";

      builder.Method.IsOnlyHeader = true;
      builder.Method.RenderHeader();
      
      builder.Writer.CloseBody();
      
      builder.NameSpace.Usings = [
         "System.Test",
         "System.A",
         "System.B"
      ];
      builder.NameSpace.EnableNullable = true;
      builder.NameSpace.AutoGenerated = true;
      
      builder.NameSpace.Path = "My.NameSpace";
      builder.NameSpace.Render();

      builder.Class.Declaration = "public abstract class Test";
      builder.Class.BaseDeclarations = [
         "BaseClassOne",
         "IInterfaceTwo"
      ];
      builder.Class.RenderDeclaration();

      builder.Method.Modifiers = "public";
      builder.Method.ReturnType = "void";
      builder.Method.Name = "TestMethod";

      builder.Method.Parameters = [
         new MethodParameter()
         {
            Name = "name",
            Type = "string"
         }
      ];
      builder.Method.RenderHeader();
      
      builder.Writer.OpenBody();
      builder.Writer.WriteLine("Console.WriteLine(name);");
      builder.Writer.CloseBody();
      
      builder.Writer.WriteLine();

      builder.Method.Modifiers = "public abstract";
      builder.Method.ReturnType = "void";
      builder.Method.Name = "AbstractMethod";

      builder.Method.IsOnlyHeader = true;
      builder.Method.RenderHeader();
      
      builder.Writer.CloseBody();

      var cha = builder.Writer.WrittenSpan[2];
      builder.Dispose();
      
      return cha;
   }
   
   [Benchmark]
   public char NewWriterNoArrayPoolNeededNoToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[1024],
         stackalloc char[6],
         1, '\t', 
         enableStateBuilders: false);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();

      var cha = builder.Writer.WrittenSpan[2];
      builder.Dispose();
      
      return cha;
   }
   
   [Benchmark]
   public char OldWriterNoToStringResult()
   {
      using var writer = new CodeWriter();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      return writer.WrittenSpan[2];
   }
   
   [Benchmark]
   public string NewWriterNoArrayPoolNeededToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[1024],
         stackalloc char[6],
         1, '\t', 
         enableStateBuilders: false);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
            .OpenHeader("public abstract", "void", "AbstractMethod", false)
            .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
            .OpenHeader("public abstract", "void", "AbstractMethod", false)
            .CloseHeaderNoParameters(true)
         .CloseBody();

      var str = builder.ToString();
      builder.Dispose();
      
      return str;
   }

   [Benchmark]
   public string OldWriterToStringResult()
   {
      using var writer = new CodeWriter();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      return writer.ToString();
   }
   
   [Benchmark]
   public char NewWriterArrayPoolNeededNoToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[32],
         stackalloc char[6],
         1, '\t', 
         enableStateBuilders: false,
         initialMinGrowCapacity: 580);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();

      var cha = builder.Writer.WrittenSpan[2];
      builder.Dispose();
      
      return cha;
   }
   
   [Benchmark]
   public string NewWriterArrayPoolNeededToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[32],
         stackalloc char[6],
         1, '\t', 
         enableStateBuilders: false,
         initialMinGrowCapacity: 580);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      var str = builder.ToString();
      
      builder.Dispose();
      return str;
   }
   
   [Benchmark]
   public string CodeGenHelpersBuilder()
   {
      var builder = CodeGenHelpers.CodeBuilder.Create("My.NameSpace")
         .Nullable()
         .WithAutoGeneratedMessage("auto generated")
            .AddNamespaceImport("System.Test")
            .AddNamespaceImport("System.A")
            .AddNamespaceImport("System.B")
         .AddClass("Test")
            .SetBaseClass("BaseClassOne")
            .AddInterface("IInterfaceTwo")
            .Abstract()
         .AddMethod("TestMethod")
            .AddParameter("string", "name")
            .WithReturnType("void")
            .WithAccessModifier(Accessibility.Public)
            .WithBody((writer) =>
            {
               writer.AppendLine("Console.WriteLine(name);");
            }).Class
         .AddMethod("AbstractMethod")
         .Abstract()
         .WithReturnType("void")
         .WithAccessModifier(Accessibility.Public);

      var str = builder.Class.Build();
      return str;
   }
}