using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Engines;
using CodeGen.Common.CodeGen;
using CodeGen.Common.CodeGen.Immediate;
using OldCodeWriter;

namespace CodeGen.Core.Perfs.CodeGen;

[SimpleJob(RunStrategy.Throughput, iterationCount: 6)]
[MinColumn, MaxColumn, MeanColumn, MedianColumn, MemoryDiagnoser]
public class OldWriterCompareBenchmark
{
   [Benchmark]
   public char NewWriterNoArrayPoolNeededNoToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[1024],
         stackalloc char[6],
         1, '\t', enableStateBuilders: false);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();

      builder.Dispose();
      return builder.Writer.WrittenSpan[2];
   }
   
   [Benchmark]
   public char OldWriterNoToStringResult()
   {
      using var writer = new CodeWriter();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      return writer.WrittenSpan[2];
   }
   
   [Benchmark]
   public string NewWriterNoArrayPoolNeededToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[1024],
         stackalloc char[6],
         1, '\t', enableStateBuilders: false);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
            .OpenHeader("public abstract", "void", "AbstractMethod", false)
            .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
            .OpenHeader("public abstract", "void", "AbstractMethod", false)
            .CloseHeaderNoParameters(true)
         .CloseBody();

      builder.Dispose();
      return builder.ToString();
   }

   [Benchmark]
   public string OldWriterToStringResult()
   {
      using var writer = new CodeWriter();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      writer.NameSpace
         .EnableNullable(false)
         .WriteLine("// <auto-generated />")
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace", false)
         .WriteLine();
      
      writer.Class
         .WriteLine("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .OpenBody()
         .Done()
         .Method.OpenHeader("public", "void", "TestMethod")
            .AddFirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod")
         .CloseHeader(true)
         .CloseBody();
      
      return writer.ToString();
   }
   
   [Benchmark]
   public char NewWriterArrayPoolNeededNoToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[32],
         stackalloc char[6],
         1, '\t', enableStateBuilders: false);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();

      builder.Dispose();
      return builder.Writer.WrittenSpan[2];
   }
   
   [Benchmark]
   public string NewWriterArrayPoolNeededToStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[32],
         stackalloc char[6],
         1, '\t', enableStateBuilders: false);
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.NameSpaceIm
         .EnableNullable()
         .AutoGeneratedComment()
         .WriteLine()
            .Using("System.Test")
            .Using("System.A")
            .Using("System.B")
            .WriteLine()
         .Set("My.NameSpace")
         .WriteLine();

      builder.ClassIm
         .OpenHeader("public abstract class Test")
            .FirstBaseDeclaration("BaseClassOne")
            .NextBaseDeclaration("IInterfaceTwo")
            .CloseBaseDeclaration()
         .CloseHeader()
         .Done()
         .MethodIm.OpenHeader("public", "void", "TestMethod")
            .FirstParameter("string", "name")
         .CloseHeader()
         .OpenBody()
            .WriteLine("Console.WriteLine(name);")
         .CloseBody()
         .WriteLine()
         .OpenHeader("public abstract", "void", "AbstractMethod", false)
         .CloseHeaderNoParameters(true)
         .CloseBody();
      
      builder.Dispose();
      return builder.ToString();
   }
   
   [Benchmark]
   public char NewWriterStatefulNoArrayPoolNeededNoStringResult()
   {
      var builder = new CodeBuilder(
         stackalloc char[1024],
         stackalloc char[6],
         1, '\t');

      builder.NameSpace.Usings = [
         "System.Test",
         "System.A",
         "System.B"
      ];
      builder.NameSpace.Path = "Your.NameSpace.Path";
      builder.NameSpace.Render();
      
      
      
      builder.Dispose();
      return builder.Writer.WrittenSpan[2];
   }
}