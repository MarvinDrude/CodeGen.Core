
using BenchmarkDotNet.Running;
using CodeGen.Common.Buffers;
using CodeGen.Common.CodeGen;
using CodeGen.Common.CodeGen.Immediate;
using CodeGen.Common.CodeGen.Models.Methods;
using CodeGen.Core.Perfs.CodeGen;

// for (var e = 0; e < 10_000; e++)
// {
//    new OldWriterCompareBenchmark().NewWriterStatefulNoArrayPoolNeededNoStringResult();
// }

#if RELEASE
BenchmarkRunner.Run<OldWriterCompareBenchmark>();
#else

var builder = new CodeBuilder(
   stackalloc char[1024],
   stackalloc char[6],
   1, '\t', enableStateBuilders: false);
      
builder.NameSpaceIm
   .EnableNullable()
   .AutoGeneratedComment()
   .WriteLine()
   .Using("System.Test")
   .Using("System.A")
   .Using("System.B")
   .WriteLine()
   .Set("My.NameSpace")
   .WriteLine();

builder.ClassIm
   .OpenHeader("public abstract class Test")
   .FirstBaseDeclaration("BaseClassOne")
   .NextBaseDeclaration("IInterfaceTwo")
   .CloseBaseDeclaration()
   .CloseHeader()
   .Done()
   .MethodIm.OpenHeader("public", "void", "TestMethod")
   .FirstParameter("string", "name")
   .CloseHeader()
   .OpenBody()
   .WriteLine("Console.WriteLine(name);")
   .CloseBody()
   .WriteLine()
   .OpenHeader("public abstract", "void", "AbstractMethod", false)
   .CloseHeaderNoParameters(true)
   .CloseBody();

// var builder = new CodeBuilder(
//    stackalloc char[512],
//    stackalloc char[128],
//    3, ' ');
//
// builder.Method.IsOnlyHeader = false;
// builder.Method.Name = "AbstractMethod<T, E>";
// builder.Method.ReturnType = "void";
// builder.Method.Modifiers = "public abstract";
// builder.Method.GenericConstraints = [
//    "where T : notnull",
//    "where E : IInterface",
// ];
// builder.Method.Parameters = [
//    new MethodParameter()
//    {
//       Name = "test",
//       Type = "string",
//    },
//    new MethodParameter()
//    {
//       Name = "test1",
//       Type = "string",
//    }
// ];
// builder.Method.RenderHeader();
// builder.Writer.OpenBody();
// builder.Writer.CloseBody();

var str = builder.ToString();
_ = "";

#endif
