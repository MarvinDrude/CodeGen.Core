using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CodeGen.Contracts.Buffers;
using CodeGen.Writing.Builders.Interfaces;

namespace CodeGen.Writing.Builders.Common;

[StructLayout(LayoutKind.Sequential)]
public readonly ref struct FileBuilder : ICodeBuilder
{
   private readonly ByReferenceStack _builder;
   internal ref CodeBuilder Builder => ref _builder.AsRef<CodeBuilder>();
   
   public FileBuilder(ref CodeBuilder builder)
   {
      _builder = ByReferenceStack.Create(ref builder);
   }

   [MethodImpl(MethodImplOptions.AggressiveInlining)]
   ref CodeBuilder ICodeBuilder.GetBuilder()
   {
      return ref Builder;
   }
}

public static class FileBuilderExtensions
{
   extension(ref FileBuilder builder)
   {
      public ref FileBuilder WriteAutoGenerated(bool newLineAfter = true)
      {
         ref var writer = ref builder.Builder.Writer;
         writer.WriteLine("// <auto-generated>");
         writer.WriteLine("// This code was generated. Changes to this file will be lost if the code is regenerated.");
         writer.WriteLine("// </auto-generated>");
         
         if (newLineAfter) writer.WriteLine();
         return ref builder;
      }
      
      public ref FileBuilder WriteStartAutoGenerated()
      {
         ref var writer = ref builder.Builder.Writer;
         writer.WriteLine("// <auto-generated>");
         
         return ref builder;
      }
      
      public ref FileBuilder WriteEndAutoGenerated(bool newLineAfter = true)
      {
         ref var writer = ref builder.Builder.Writer;
         writer.WriteLine("// </auto-generated>");
         
         if (newLineAfter) writer.WriteLine();
         return ref builder;
      }

      public ref FileBuilder WriteUsing(string nameSpace, bool extraNewLineAfter = false)
      {
         ref var writer = ref builder.Builder.Writer;
         writer.WriteInterpolated($"using {nameSpace};");
         writer.WriteLine();
         
         if (extraNewLineAfter) writer.WriteLine();
         return ref builder;
      }

      public ref FileBuilder WriteNullableEnable(bool newLineAfter = true)
      {
         ref var writer = ref builder.Builder.Writer;
         writer.WriteLine("#nullable enable");
         
         if (newLineAfter) writer.WriteLine();
         return ref builder;
      }
   }
}