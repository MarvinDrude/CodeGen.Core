using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CodeGen.Common.Buffers;

namespace CodeGen.Common.CodeGen.Immediate;

[StructLayout(LayoutKind.Sequential)]
public readonly ref struct NameSpaceImmediateBuilder : IImmediateBuilder
{
   private readonly ref byte _builderReference;
   public ref CodeBuilder Builder
   {
      [MethodImpl(MethodImplOptions.AggressiveInlining)]
      get => ref Unsafe.As<byte, CodeBuilder>(ref _builderReference);
   }

   public NameSpaceImmediateBuilder(ref CodeBuilder builder)
   {
      _builderReference = ref Unsafe.As<CodeBuilder, byte>(ref builder);
   }
}

public static class NameSpaceImmediateBuilderExtensions
{
   [MethodImpl(MethodImplOptions.AggressiveInlining)]
   public static ref NameSpaceImmediateBuilder EnableNullable(
      this ref NameSpaceImmediateBuilder self, bool extraLine = false)
   {
      self.Builder.Writer.WriteLine(NullableChars);
      self.Builder.Writer.WriteLineIf(extraLine);
   
      return ref self;
   }
   
   [MethodImpl(MethodImplOptions.AggressiveInlining)]
   public static ref NameSpaceImmediateBuilder AutoGeneratedComment(
      this ref NameSpaceImmediateBuilder self, bool extraLine = false)
   {
      self.Builder.Writer.WriteLine(AutoGeneratedChars);
      self.Builder.Writer.WriteLineIf(extraLine);

      return ref self;
   }
   
   [MethodImpl(MethodImplOptions.AggressiveInlining)]
   public static ref NameSpaceImmediateBuilder Using(
      this ref NameSpaceImmediateBuilder self, scoped ReadOnlySpan<char> nameSpace)
   {
      ArgumentOutOfRangeException.ThrowIfGreaterThan(nameSpace.Length, 1024 - 7, nameof(nameSpace));
      Span<char> buffer = stackalloc char[nameSpace.Length + 7]; // using + ;
      var usingBuffer = UsingChars;

      var result = buffer;
      
      usingBuffer.CopyTo(buffer);
      buffer = buffer[6..];
   
      nameSpace.CopyTo(buffer);
      buffer[^1] = ';';
   
      self.Builder.Writer.WriteLine(result);
      return ref self;
   }

   [MethodImpl(MethodImplOptions.AggressiveInlining)]
   public static ref NameSpaceImmediateBuilder Set(
      this ref NameSpaceImmediateBuilder self, scoped ReadOnlySpan<char> nameSpace)
   {
      ArgumentOutOfRangeException.ThrowIfGreaterThan(nameSpace.Length, 1024, nameof(nameSpace));
       
      Span<char> buffer = stackalloc char[nameSpace.Length + 11]; // namespace + ;
      var fixedBuffer = NameSpaceChars;
      var result = buffer;
      
      fixedBuffer.CopyTo(buffer);
      buffer = buffer[10..];

      nameSpace.CopyTo(buffer);
      buffer[^1] = ';';
      
      self.Builder.Writer.WriteLine(result);
      
      return ref self;
   }

   private static ReadOnlySpan<char> NameSpaceChars => "namespace ".AsSpan();
   private static ReadOnlySpan<char> UsingChars => "using ".AsSpan();
   private static ReadOnlySpan<char> AutoGeneratedChars => "// <auto-generated>".AsSpan();
   private static ReadOnlySpan<char> NullableChars => "#nullable enable".AsSpan();
}