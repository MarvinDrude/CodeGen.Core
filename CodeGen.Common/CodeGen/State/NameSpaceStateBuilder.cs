using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CodeGen.Common.Buffers;
using CodeGen.Common.CodeGen.Immediate;

namespace CodeGen.Common.CodeGen.State;

[StructLayout(LayoutKind.Sequential)]
public ref struct NameSpaceStateBuilder : IStateBuilder
{
   private readonly ref byte _builderReference;
   public ref CodeBuilder Builder
   {
      [MethodImpl(MethodImplOptions.AggressiveInlining)]
      get => ref Unsafe.As<byte, CodeBuilder>(ref _builderReference);
   }

   public bool EnableNullable;
   public bool AutoGenerated;

   public bool ExtraLines;
   public RefStringView Path;

   public Span<string> Usings;

   public NameSpaceStateBuilder(ref CodeBuilder builder)
   {
      _builderReference = ref Unsafe.As<CodeBuilder, byte>(ref builder);
      Reset();
   }

   public void Render(bool reset = true)
   {
      if (EnableNullable)
      {
         Builder.NameSpaceIm.EnableNullable(ExtraLines);
      }

      if (AutoGenerated)
      {
         Builder.NameSpaceIm.AutoGeneratedComment(ExtraLines);
      }

      if (EnableNullable || AutoGenerated)
      {
         Builder.Writer.WriteLine();
      }

      foreach (var usingString in Usings)
      {
         Builder.NameSpaceIm.Using(usingString);
      }

      if (Usings.Length > 0)
      {
         Builder.Writer.WriteLine();
      }

      if (Path.Length > 0)
      {
         Builder.NameSpaceIm.Set(Path.Span);
      }
      
      if(reset) Reset();
   }
   
   private void Reset()
   {
      EnableNullable = true;
      AutoGenerated = true;

      ExtraLines = false;
      Path = "";
      Usings = [];
   }
}

public static class NameSpaceStateBuilderExtensions
{
   
}