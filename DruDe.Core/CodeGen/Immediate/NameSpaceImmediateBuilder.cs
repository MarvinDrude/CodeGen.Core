using System.Runtime.CompilerServices;
using DruDe.Core.Buffers;

namespace DruDe.Core.CodeGen.Immediate;

public readonly ref struct NameSpaceImmediateBuilder
{
   private readonly ref byte _builderReference;
   internal ref CodeBuilder Builder
   {
      [MethodImpl(MethodImplOptions.AggressiveInlining)]
      get => ref Unsafe.As<byte, CodeBuilder>(ref _builderReference);
   }

   public NameSpaceImmediateBuilder(ref CodeBuilder builder)
   {
      _builderReference = ref Unsafe.As<CodeBuilder, byte>(ref builder);
   }
}

public static class NameSpaceImmediateBuilderExtensions
{
   public static ref NameSpaceImmediateBuilder EnableNullable(this ref NameSpaceImmediateBuilder self, bool extraLine = true)
   {
      self.Builder.Writer.WriteLine("#nullable enable");
      self.Builder.Writer.WriteLineIf(extraLine);
   
      return ref self;
   }
   
   public static ref NameSpaceImmediateBuilder AutoGeneratedComment(this ref NameSpaceImmediateBuilder self, bool extraLine = true)
   {
      self.Builder.Writer.WriteLine("// <auto-generated>");
      self.Builder.Writer.WriteLineIf(extraLine);

      return ref self;
   }
   
   public static ref NameSpaceImmediateBuilder Using(this ref NameSpaceImmediateBuilder self, scoped ReadOnlySpan<char> nameSpace)
   {
      ArgumentOutOfRangeException.ThrowIfGreaterThan(nameSpace.Length, 1024 - 7, nameof(nameSpace));
      Span<char> buffer = stackalloc char[nameSpace.Length + 7]; // using + ;
      ReadOnlySpan<char> usingBuffer = "using ";
   
      usingBuffer.CopyTo(buffer);
      buffer = buffer[6..];
   
      nameSpace.CopyTo(buffer);
      buffer[^1] = ';';
   
      self.Builder.Writer.WriteLine(buffer);
      return ref self;
   }
   
   
}